labs(title = "FAIRness (%) of dental research data by year",
subtitle = "Mean and 95% confidence interval. Each point represents one article",
y = "FAIRness Compliance (%)",
color = "Journal",
x = "Year") +
ylim(0, 100)
df %>%
filter(true_open_data == "Yes") %>%
mutate(Journal = fct_lump(journalTitle, n = 6)) %>%
group_by(Journal, pubYear) %>%
summarise(n = n()) %>%
ggplot(aes(
x = pubYear,
shape = Journal,
color = Journal,
group = Journal,
y = n
)) +
geom_jitter(alpha = 0.8) +
scale_shape_manual(values = 0:8) +
scale_y_log10()
pivot_wider(names_from = pubYear, values_from = n )
pivot_wider(names_from = pubYear, values_from = n )
df %>%
filter(true_open_data == "Yes") %>%
mutate(Journal = fct_lump(journalTitle, n = 6)) %>%
group_by(Journal, pubYear)
df %>%
filter(true_open_data == "Yes") %>%
mutate(Journal = fct_lump(journalTitle, n = 6)) %>%
group_by(Journal, pubYear) %>%
summarise(n = n())
df %>%
filter(true_open_data == "Yes") %>%
mutate(Journal = fct_lump(journalTitle, n = 6)) %>%
group_by(Journal, pubYear) %>%
summarise(n = n()) %>%
ggplot(aes(
x = pubYear,
shape = Journal,
color = Journal,
group = Journal,
y = n
))
df %>%
filter(true_open_data == "Yes") %>%
mutate(Journal = fct_lump(journalTitle, n = 6)) %>%
group_by(Journal, pubYear) %>%
summarise(n = n()) %>%
ggplot(aes(
x = pubYear,
shape = Journal,
color = Journal,
group = Journal,
y = n
)) +
geom_jitter(alpha = 0.8) +
scale_shape_manual(values = 0:8) +
scale_y_log10()
df %>%
filter(true_open_data == "Yes") %>%
filter(!is.na(FAIRness)) %>%
mutate(Journal = fct_lump(journalTitle, n = 6)) %>%
group_by(Journal, pubYear) %>%
summarise(FAIRness_mean = mean(FAIRness, na.rm = T)) %>%
mutate_if(is.numeric, format, 1) %>%
pivot_wider(names_from = pubYear, values_from = FAIRness_mean )
df %>%
filter(true_open_data == "Yes") %>%
filter(!is.na(FAIRness)) %>%
mutate(Journal = fct_lump(journalTitle, n = 6)) %>%
select(Journal, pubYear, Findability:Reusability ) %>%
pivot_longer(Findability:Reusability,
names_to = "FAIR_item",
values_to = "FAIR_values") %>%
mutate(FAIR_item = fct_relevel(FAIR_item, "Findability",
"Accesibility",
"Interoperability",
"Reusability")) %>%
ggplot(aes(x = FAIR_item,
y = FAIR_values)) +
geom_boxplot(width = .5, color = "dodgerblue") +
geom_jitter(alpha = .1, color = "Grey 20") +
labs(title = "FAIR level by domain",
x = "Domain",
y = "FAIR value")
df %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
select(journalTitle,
pubYear,
Findability_level:Reusability_level) %>%
pivot_longer(Findability_level:Reusability_level,
names_to = "item",
values_to = "value") %>%
mutate(value = fct_relevel(value, "incomplete", "initial",
"moderate", "advanced")) %>%
mutate(
item = fct_relevel(
item,
"Findability_level", "Accesibility_level",
"Interoperability_level", "Reusability_level"
)) %>%
mutate(item = fct_recode(item,
"Findability" = "Findability_level",
"Accesibility" = "Accesibility_level",
"Interoperability" = "Interoperability_level",
"Reusability" = "Reusability_level")) %>%
# table for check
# select(item, value) %>%
# gtsummary::tbl_summary(by = item)
group_by(item, value)  %>%
count() %>%
pivot_wider(names_from = value,
values_from = n)
df %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
select(journalTitle,
pubYear,
Findability_level:Reusability_level) %>%
pivot_longer(Findability_level:Reusability_level,
names_to = "item",
values_to = "value") %>%
mutate(value = fct_relevel(value, "incomplete", "initial",
"moderate", "advanced")) %>%
mutate(
item = fct_relevel(
item,
"Findability_level", "Accesibility_level",
"Interoperability_level", "Reusability_level"
)) %>%
mutate(item = fct_recode(item,
"Findability" = "Findability_level",
"Accesibility" = "Accesibility_level",
"Interoperability" = "Interoperability_level",
"Reusability" = "Reusability_level")) %>%
# table for check
# select(item, value) %>%
# gtsummary::tbl_summary(by = item)
group_by(item, value)  %>%
count() %>%
ggplot(aes(x = item,
y = n,
fill = forcats::fct_rev(value))) +
# geom_col() +
geom_bar(position = "fill", stat = "identity") +
# geom_col(position = position_stack(reverse = TRUE)) +
scale_x_discrete(limits = rev) +
# scale_fill_discrete(limits = rev) +
scale_fill_manual(values = c( "#51B364", "#8ACE7E", "#FFDA66", "#E03531" )) +
# scale_fill_brewer(palette = "RdYiGn") +
labs(title = "Summary of FAIR levels by metric",
fill = "FAIR Level",
x = "FAIR Metric",
y = "") +
coord_flip() +
scale_y_continuous(labels = scales::percent_format())
ggsave(path = here("Figs"),
filename = "Fig1_fair_levels_by_metric.pdf",
width = 5, height = 5, device='pdf', dpi=600)
df %>%
select(doi_publication, title, journalTitle, pubYear, FAIRness, FAIR_level) %>%
arrange(desc(FAIRness)) %>%
head()
df %>%
filter(!is.na(FAIRness)) %>%
select(doi_publication, title, journalTitle, pubYear, FAIRness, FAIR_level) %>%
arrange(desc(FAIRness)) %>%
tail()
p2 <- df %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item)) %>%
mutate(value = as.character(value)) %>%
mutate(value = fct_recode(value,
"Incomplete" = "0",
"Initial"    = "1" ,
"Moderate"   = "2",
"Advanced"   = "3"
)
) %>%
mutate(value = fct_relevel(value,
"Incomplete",
"Initial",
"Moderate",
"Advanced")) %>%
select(journalTitle, pubYear, item, value) %>%
group_by(journalTitle, item, value) %>%
count() %>%
ggplot(aes(x = journalTitle,
y = n,
fill = forcats::fct_rev(value))) +
# geom_col() +
geom_bar(position = "fill", stat = "identity") +
# geom_col(position = position_stack(reverse = TRUE)) +
scale_x_discrete(limits = rev) +
# scale_fill_discrete(limits = rev) +
scale_fill_manual(values = c( "#51B364", "#8ACE7E", "#FFDA66", "#E03531" )) +
# scale_fill_brewer(palette = "RdYiGn") +
labs(title = "Summary of FAIR levels by Journal",
fill = "FAIR Level",
x = "",
y = "") +
coord_flip() +
# facet_grid(. ~ item ) +
scale_y_continuous(labels = scales::percent_format())
p1 <- df %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item)) %>%
mutate(value = as.character(value)) %>%
mutate(value = fct_recode(value,
"Incomplete" = "0",
"Initial"    = "1" ,
"Moderate"   = "2",
"Advanced"   = "3"
)
) %>%
mutate(value = fct_relevel(value,
"Incomplete",
"Initial",
"Moderate",
"Advanced")) %>%
select(journalTitle, pubYear, item, value) %>%
group_by(pubYear, item, value) %>%
count() %>%
ggplot(aes(x = as.factor(pubYear),
y = n,
fill = forcats::fct_rev(value))) +
# geom_col() +
geom_bar(position = "fill", stat = "identity") +
# geom_col(position = position_stack(reverse = TRUE)) +
scale_x_discrete(limits = rev) +
# scale_fill_discrete(limits = rev) +
scale_fill_manual(values = c( "#51B364", "#8ACE7E", "#FFDA66", "#E03531" )) +
# scale_fill_brewer(palette = "RdYiGn") +
labs(title = "Summary of FAIR levels by Year",
fill = "FAIR Level",
x = "Year",
y = "") +
# coord_flip() +
# facet_grid(. ~ item ) +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::percent_format())
p1 + p2 + plot_annotation(tag_levels = 'A')
ggsave(path = here("Figs"),
filename = "Fig2_year_journal.pdf",
width = 9, height = 4, device='pdf', dpi=600)
df %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item)) %>%
mutate(value = as.character(value)) %>%
mutate(value = fct_recode(value,
"Incomplete" = "0",
"Initial"    = "1" ,
"Moderate"   = "2",
"Advanced"   = "3"
)
) %>%
mutate(value = fct_relevel(value,
"Incomplete",
"Initial",
"Moderate",
"Advanced")) %>%
select(journalTitle, pubYear, item, value) %>%
group_by(pubYear, item, value) %>%
count() %>%
ggplot(aes(x = as.factor(pubYear),
y = n,
fill = forcats::fct_rev(value))) +
# geom_col() +
geom_bar(position = "fill", stat = "identity") +
# geom_col(position = position_stack(reverse = TRUE)) +
scale_x_discrete(limits = rev) +
# scale_fill_discrete(limits = rev) +
scale_fill_manual(values = c( "#51B364", "#8ACE7E", "#FFDA66", "#E03531" )) +
# scale_fill_brewer(palette = "RdYiGn") +
labs(title = "Summary of FAIR levels by Year",
fill = "FAIR Level",
x = "Year",
y = "") +
# coord_flip() +
# facet_grid(. ~ item ) +
scale_y_continuous(labels = scales::percent_format())
p3 <- df %>%
# reoirder and relabel the data
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item)) %>%
mutate(value = as.character(value)) %>%
mutate(value = fct_recode(
value,
"Incomplete" = "0",
"Initial"    = "1" ,
"Moderate"   = "2",
"Advanced"   = "3"
)) %>%
mutate(value = fct_relevel(value,
"Incomplete",
"Initial",
"Moderate",
"Advanced"))  %>%
#########################
# relevel
mutate(
item = fct_recode(
item,
"F1-01D - Data is assigned a globally unique identifier" = "FsF_F1_01D"	,
"F1-02D - Data is assigned a persistent identifier" = "FsF_F1_02D"	,
"F2-01M - Metadata includes descriptive core elements to support data findability" = "FsF_F2_01M"	,
"F3-01M - Metadata includes the identifier of the data it describes" = "FsF_F3_01M"	,
"F4-01M - Metadata is offered in such a way that it can be retrieved by machines" = "FsF_F4_01M"	,
"A1-01M - Metadata contains access level and access conditions of the data" = "FsF_A1_01M"	,
"A1-02M - Metadata is accessible through a standardized communication protocol" = "FsF_A1_03D"	,
"A1-03D - Data is accessible through a standardized communication protocol" = "FsF_A1_02M"	,
"I1-01M - Metadata is represented using a formal knowledge representation language" = "FsF_I1_01M"	,
"I1-02M - Metadata uses semantic resources" = "FsF_I1_02M"	,
"I3-01M - Metadata includes links between the data and its related entities" = "FsF_I3_01M"	,
"R1-01MD - Metadata specifies the content of the data" = "FsF_R1_01MD"	,
"R1.1-01M - Metadata includes license information under which data can be reused" = "FsF_R1.1_01M"	,
"R1.2-01M - Metadata includes provenance information about data creation or generation" = "FsF_R1.2_01M"	,
"R1.3-01M - Metadata follows a standard recommended by the target research community of the data" = "FsF_R1.3_01M"	,
"R1.3-02D - Data is available in a file format recommended by the target research community" = "FsF_R1.3_02D"
)
) %>%
#########################
select(item, value) %>%
group_by(item, value) %>%
count() %>%
## The plot
ggplot(aes(
x = item,
y = n,
fill = forcats::fct_rev(value)
)) +
# geom_col() +
geom_bar(position = "fill", stat = "identity") +
# geom_col(position = position_stack(reverse = TRUE)) +
scale_x_discrete(limits = rev) +
# scale_fill_discrete(limits = rev) +
scale_fill_manual(values = c("#51B364", "#8ACE7E", "#FFDA66", "#E03531")) +
# scale_fill_brewer(palette = "RdYiGn") +
labs(title = "FAIR maturity indicators",
# fill = "FAIR Level",
x = "FAIR Maturity Indicator",
y = "") +
# coord_flip() +
# facet_grid(. ~ item ) +
coord_flip() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::percent_format())
p3
ggsave(path = here("Figs"),
filename = "Fig3_fair_maturity.pdf",
width = 10, height = 5, device='pdf', dpi=300)
patch <- p1 | p2
patch / p3 + plot_annotation(tag_levels = 'A')
ggpubr::ggarrange(p1,                                                 # First row with scatter plot
ggpubr::ggarrange(p2, p3, ncol = 2, labels = c("B", "C")), # Second row with box and dot plots
nrow = 2,
labels = "A"                                        # Labels of the scatter plot
)
cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = .5, width = .5, height = .5) +
cowplot::draw_plot(p2, x = .5, y = .5, width = .5, height = .5) +
cowplot::draw_plot(p3, x = 0, y = 0, width = 1, height = 0.5) +
cowplot::draw_plot_label(label = c("A", "B", "C"), size = 15,
x = c(0, 0.5, 0), y = c(1, 1, 0.5))
ggsave(path = here("Figs"),
filename = "Fig_2_A_B_C.pdf",
width = 15, height = 7, device='pdf', dpi=600)
df %>%
# reoirder and relabel the data
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item)) %>%
mutate(value = as.character(value)) %>%
mutate(value = fct_recode(
value,
"Incomplete" = "0",
"Initial"    = "1" ,
"Moderate"   = "2",
"Advanced"   = "3"
)) %>%
mutate(value = fct_relevel(value,
"Incomplete",
"Initial",
"Moderate",
"Advanced"))  %>%
#########################
## recode for the table
mutate(value = fct_collapse(value,
adv_mod = c("Advanced", "Moderate"),
low_inc = "Init_inc")) %>%
# relevel
mutate(
item = fct_recode(
item,
"F1-01D - Data is assigned a globally unique identifier" = "FsF_F1_01D"	,
"F1-02D - Data is assigned a persistent identifier" = "FsF_F1_02D"	,
"F2-01M - Metadata includes descriptive core elements to support data findability" = "FsF_F2_01M"	,
"F3-01M - Metadata includes the identifier of the data it describes" = "FsF_F3_01M"	,
"F4-01M - Metadata is offered in such a way that it can be retrieved by machines" = "FsF_F4_01M"	,
"A1-01M - Metadata contains access level and access conditions of the data" = "FsF_A1_01M"	,
"A1-02M - Metadata is accessible through a standardized communication protocol" = "FsF_A1_03D"	,
"A1-03D - Data is accessible through a standardized communication protocol" = "FsF_A1_02M"	,
"I1-01M - Metadata is represented using a formal knowledge representation language" = "FsF_I1_01M"	,
"I1-02M - Metadata uses semantic resources" = "FsF_I1_02M"	,
"I3-01M - Metadata includes links between the data and its related entities" = "FsF_I3_01M"	,
"R1-01MD - Metadata specifies the content of the data" = "FsF_R1_01MD"	,
"R1.1-01M - Metadata includes license information under which data can be reused" = "FsF_R1.1_01M"	,
"R1.2-01M - Metadata includes provenance information about data creation or generation" = "FsF_R1.2_01M"	,
"R1.3-01M - Metadata follows a standard recommended by the target research community of the data" = "FsF_R1.3_01M"	,
"R1.3-02D - Data is available in a file format recommended by the target research community" = "FsF_R1.3_02D"
)
) %>%
#########################
select(item, value) %>%
group_by(item, value) %>%
count()  %>%
mutate(n = n/112*100) %>%
pivot_wider(names_from = value,
values_from = n)
df %>%
filter(!is.na(is_open_data)) %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
select(journalTitle,
pubYear,
FsF_F1_01D:FsF_R1.3_02D) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item))  %>%
group_by(journalTitle, item) %>%
summarise(mean = mean(value)) %>%
pivot_wider(names_from = item,
values_from = mean)
df %>%
filter(!is.na(is_open_data)) %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
select(journalTitle,
pubYear,
FsF_F1_01D:FsF_R1.3_02D) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item))  %>%
group_by(pubYear, item) %>%
summarise(mean = mean(value)) %>%
pivot_wider(names_from = item,
values_from = mean)
df %>%
filter(pubYear < 2022) %>%
group_by(pubYear, isOpenAccess) %>%
count() %>%
ggplot(aes(x = pubYear,
group = isOpenAccess,
color = isOpenAccess,
y = n)) +
geom_line() +
scale_color_manual(values=c('red','green'))
df %>%
filter(pubYear < 2022) %>%
group_by(pubYear, true_open_data) %>%
count() %>%
ggplot(aes(x = pubYear,
group = true_open_data,
color = true_open_data,
y = n)) +
geom_line() +
scale_color_manual(values=c('red','green'))
df %>%
group_by(pubYear, isOpenAccess) %>%
summarise(mean = mean(citedByCount)) %>%
ggplot(aes(x = pubYear,
y = mean,
group = isOpenAccess,
color = isOpenAccess)) +
geom_line()
df %>%
group_by(pubYear, true_open_data) %>%
summarise(mean = mean(citedByCount)) %>%
ggplot(aes(x = pubYear,
y = mean,
group = true_open_data,
color = true_open_data)) +
geom_line()
glm(citedByCount ~  pubYear +  true_open_data + isOpenAccess + true_open_data * isOpenAccess,
data = df) %>%
gtsummary::tbl_regression(exponentiate = T)
# open_data_all %>%
#  dataMaid::makeCodebook()
# sessionInfo()
