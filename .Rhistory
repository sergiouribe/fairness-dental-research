adorn_totals(where = "row")
df %>%
tabyl(isOpenAccess) %>%
janitor::adorn_pct_formatting() %>%
adorn_totals(where = "row")
df %>%
filter(isOpenAccess == "No") %>%
tabyl(isOpenAccess, is_open_data) %>%
adorn_totals(where = c("row", "col"))
df %>%
filter(isOpenAccess == "Yes") %>%
tabyl(true_open_data, is_open_data)
df %>%
filter(pubYear < 2022) %>%
select(pubYear, true_open_data) %>%
group_by(pubYear, true_open_data) %>%
count() %>%
ggplot(aes(x = pubYear,
y = n,
color = true_open_data,
group = true_open_data)) +
geom_line()
df %>%
group_by(isOpenAccess) %>%
summarise(count = n_distinct(journalTitle))
df %>%
select(journalTitle, isOpenAccess) %>%
gtsummary::tbl_summary(by = isOpenAccess,
sort = all_categorical() ~ "frequency")
df %>%
filter(!is.na(is_open_data)) %>%
mutate(journalTitle = fct_lump_prop(journalTitle, p = .01)) %>%
select(journalTitle, pubYear, isOpenAccess, true_open_data) %>%
gtsummary::tbl_summary(by = isOpenAccess,
sort = all_categorical() ~ "frequency" ) %>%
gtsummary::add_overall() %>%
gtsummary::bold_labels()
df %>%
filter(!is.na(is_open_data)) %>%
mutate(journalTitle = fct_lump_prop(journalTitle, p = 0.008)) %>%
select(journalTitle, pubYear, true_open_data) %>%
gtsummary::tbl_summary(by = true_open_data,
sort = all_categorical() ~ "frequency")
df %>%
filter(true_open_data == "Yes") %>%
group_by(journalTitle) %>%
count() %>%
arrange(desc(n))
df %>%
filter(journalTitle == "J Clin Periodontol") %>%
select(journalTitle, true_open_data) %>%
gtsummary::tbl_summary(by = true_open_data,
sort = all_categorical() ~ "frequency")
df %>%
tabyl(true_open_data, isOpenAccess)
summary(df$FAIRness)
df %>%
filter(true_open_data == "Yes") %>%
summarise(n = n(), mean = mean(FAIRness), sd = sd(FAIRness))
df %>%
filter(true_open_data == "Yes") %>%
pivot_longer(Findability:Reusability,
names_to = "FAIR_item",
values_to = "FAIR_values") %>%
mutate(FAIR_item = fct_relevel(FAIR_item, "Findable", "Accesibility", "Interoperability", "Reusability")) %>%
group_by(FAIR_item) %>%
summarise(n = n(), mean = mean(FAIR_values), sd = sd(FAIR_values))
df %>%
filter(true_open_data == "Yes") %>%
ggplot(aes(x = FAIRness)) +
xlim(0, 100) +
ylim(0, 25) +
geom_histogram(bins = 10, color = "Grey 70", fill = "Grey 50")
df %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
group_by(journalTitle) %>%
summarise(n = n(), FAIRmean = mean(FAIRness), sd = sd(FAIRness), min = min(FAIRness), max = max(FAIRness)) %>%
arrange(desc(FAIRmean))
df %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
group_by(pubYear) %>%
summarise(n = n(), FAIRmean = mean(FAIRness), sd = sd(FAIRness), min = min(FAIRness), max = max(FAIRness)) %>%
arrange(pubYear)
df %>%
filter(true_open_data == "Yes") %>%
ggplot(aes(x = fct_reorder(journalTitle, FAIRness),
color = pubYear,
y = FAIRness
)) +
geom_jitter(alpha = .5) +
coord_flip() +
ylim(0, 100) +
labs(title = "FAIRness level by journal",
x = "Journal",
y = "FAIRness level (%)",
color = "Year")
df %>%
filter(true_open_data == "Yes") %>%
mutate(Journal = fct_lump_min(journalTitle, min = 3)) %>%
with(glm(FAIRness ~ Journal + pubYear)) %>%
gtsummary::tbl_regression(exponentiate = T ) %>%
sort_p()
df %>%
mutate(id = "a") %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 4)) %>%
ggplot(aes(
x = as.factor(pubYear),
y = FAIRness,
# color = journalTitle,
group = id
)) +
geom_point(position = position_jitter(width = .4), alpha = .3) +
stat_summary(
fun.y = mean,
na.rm = TRUE,
geom = "point",
color = "dodgerblue",
size = 4,
shape = "diamond"
) +
# 95 CI
stat_summary(
geom = "pointrange",
fun.data = mean_cl_normal,
fun.args = list(conf.int = .95),
color = "dodgerblue"
) +
# stat_summary(fun.data = mean_cl_normal, na.rm =TRUE,
#             geom = "errorbar", width = .2, color = "red") +
# Average
stat_summary(
fun.y = mean,
na.rm = TRUE,
aes(group = 1),
geom = "line",
color = "dodgerblue",
size = .75,
shape = "diamond"
) +
labs(title = "FAIRness (%) of dental research data by year",
subtitle = "Mean and 95% confidence interval. Each point represents one article",
y = "FAIRness Compliance (%)",
color = "Journal",
x = "Year") +
ylim(0, 100)
df %>%
filter(true_open_data == "Yes") %>%
mutate(Journal = fct_lump(journalTitle, n = 6)) %>%
group_by(Journal, pubYear) %>%
summarise(n = n()) %>%
ggplot(aes(
x = pubYear,
shape = Journal,
color = Journal,
group = Journal,
y = n
)) +
geom_jitter(alpha = 0.8) +
scale_shape_manual(values = 0:8) +
scale_y_log10()
pivot_wider(names_from = pubYear, values_from = n )
patch <- p1 | p2
p3
p3 <- df %>%
# reoirder and relabel the data
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item)) %>%
mutate(value = as.character(value)) %>%
mutate(value = fct_recode(
value,
"Incomplete" = "0",
"Initial"    = "1" ,
"Moderate"   = "2",
"Advanced"   = "3"
)) %>%
mutate(value = fct_relevel(value,
"Incomplete",
"Initial",
"Moderate",
"Advanced"))  %>%
#########################
# relevel
mutate(
item = fct_recode(
item,
"F1-01D - Data is assigned a globally unique identifier" = "FsF_F1_01D"	,
"F1-02D - Data is assigned a persistent identifier" = "FsF_F1_02D"	,
"F2-01M - Metadata includes descriptive core elements to support data findability" = "FsF_F2_01M"	,
"F3-01M - Metadata includes the identifier of the data it describes" = "FsF_F3_01M"	,
"F4-01M - Metadata is offered in such a way that it can be retrieved by machines" = "FsF_F4_01M"	,
"A1-01M - Metadata contains access level and access conditions of the data" = "FsF_A1_01M"	,
"A1-02M - Metadata is accessible through a standardized communication protocol" = "FsF_A1_03D"	,
"A1-03D - Data is accessible through a standardized communication protocol" = "FsF_A1_02M"	,
"I1-01M - Metadata is represented using a formal knowledge representation language" = "FsF_I1_01M"	,
"I1-02M - Metadata uses semantic resources" = "FsF_I1_02M"	,
"I3-01M - Metadata includes links between the data and its related entities" = "FsF_I3_01M"	,
"R1-01MD - Metadata specifies the content of the data" = "FsF_R1_01MD"	,
"R1.1-01M - Metadata includes license information under which data can be reused" = "FsF_R1.1_01M"	,
"R1.2-01M - Metadata includes provenance information about data creation or generation" = "FsF_R1.2_01M"	,
"R1.3-01M - Metadata follows a standard recommended by the target research community of the data" = "FsF_R1.3_01M"	,
"R1.3-02D - Data is available in a file format recommended by the target research community" = "FsF_R1.3_02D"
)
) %>%
#########################
select(item, value) %>%
group_by(item, value) %>%
count() %>%
## The plot
ggplot(aes(
x = item,
y = n,
fill = forcats::fct_rev(value)
)) +
# geom_col() +
geom_bar(position = "fill", stat = "identity") +
# geom_col(position = position_stack(reverse = TRUE)) +
scale_x_discrete(limits = rev) +
# scale_fill_discrete(limits = rev) +
scale_fill_manual(values = c("#51B364", "#8ACE7E", "#FFDA66", "#E03531")) +
# scale_fill_brewer(palette = "RdYiGn") +
labs(title = "FAIR maturity indicators",
# fill = "FAIR Level",
x = "FAIR Maturity Indicator",
y = "") +
# coord_flip() +
# facet_grid(. ~ item ) +
coord_flip() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::percent_format())
p3
patch <- p1 | p2
p2 <- df %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item)) %>%
mutate(value = as.character(value)) %>%
mutate(value = fct_recode(value,
"Incomplete" = "0",
"Initial"    = "1" ,
"Moderate"   = "2",
"Advanced"   = "3"
)
) %>%
mutate(value = fct_relevel(value,
"Incomplete",
"Initial",
"Moderate",
"Advanced")) %>%
select(journalTitle, pubYear, item, value) %>%
group_by(journalTitle, item, value) %>%
count() %>%
ggplot(aes(x = journalTitle,
y = n,
fill = forcats::fct_rev(value))) +
# geom_col() +
geom_bar(position = "fill", stat = "identity") +
# geom_col(position = position_stack(reverse = TRUE)) +
scale_x_discrete(limits = rev) +
# scale_fill_discrete(limits = rev) +
scale_fill_manual(values = c( "#51B364", "#8ACE7E", "#FFDA66", "#E03531" )) +
# scale_fill_brewer(palette = "RdYiGn") +
labs(title = "Summary of FAIR levels by Journal",
fill = "FAIR Level",
x = "",
y = "") +
coord_flip() +
# facet_grid(. ~ item ) +
scale_y_continuous(labels = scales::percent_format())
p1 <- df %>%
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item)) %>%
mutate(value = as.character(value)) %>%
mutate(value = fct_recode(value,
"Incomplete" = "0",
"Initial"    = "1" ,
"Moderate"   = "2",
"Advanced"   = "3"
)
) %>%
mutate(value = fct_relevel(value,
"Incomplete",
"Initial",
"Moderate",
"Advanced")) %>%
select(journalTitle, pubYear, item, value) %>%
group_by(pubYear, item, value) %>%
count() %>%
ggplot(aes(x = as.factor(pubYear),
y = n,
fill = forcats::fct_rev(value))) +
# geom_col() +
geom_bar(position = "fill", stat = "identity") +
# geom_col(position = position_stack(reverse = TRUE)) +
scale_x_discrete(limits = rev) +
# scale_fill_discrete(limits = rev) +
scale_fill_manual(values = c( "#51B364", "#8ACE7E", "#FFDA66", "#E03531" )) +
# scale_fill_brewer(palette = "RdYiGn") +
labs(title = "Summary of FAIR levels by Year",
fill = "FAIR Level",
x = "Year",
y = "") +
# coord_flip() +
# facet_grid(. ~ item ) +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::percent_format())
p3 <- df %>%
# reoirder and relabel the data
filter(true_open_data == "Yes") %>%
mutate(journalTitle = fct_lump_min(journalTitle, min = 3)) %>%
pivot_longer(FsF_F1_01D:FsF_R1.3_02D,
names_to = "item",
values_to = "value") %>%
mutate(item = fct_inorder(item)) %>%
mutate(value = as.character(value)) %>%
mutate(value = fct_recode(
value,
"Incomplete" = "0",
"Initial"    = "1" ,
"Moderate"   = "2",
"Advanced"   = "3"
)) %>%
mutate(value = fct_relevel(value,
"Incomplete",
"Initial",
"Moderate",
"Advanced"))  %>%
#########################
# relevel
mutate(
item = fct_recode(
item,
"F1-01D - Data is assigned a globally unique identifier" = "FsF_F1_01D"	,
"F1-02D - Data is assigned a persistent identifier" = "FsF_F1_02D"	,
"F2-01M - Metadata includes descriptive core elements to support data findability" = "FsF_F2_01M"	,
"F3-01M - Metadata includes the identifier of the data it describes" = "FsF_F3_01M"	,
"F4-01M - Metadata is offered in such a way that it can be retrieved by machines" = "FsF_F4_01M"	,
"A1-01M - Metadata contains access level and access conditions of the data" = "FsF_A1_01M"	,
"A1-02M - Metadata is accessible through a standardized communication protocol" = "FsF_A1_03D"	,
"A1-03D - Data is accessible through a standardized communication protocol" = "FsF_A1_02M"	,
"I1-01M - Metadata is represented using a formal knowledge representation language" = "FsF_I1_01M"	,
"I1-02M - Metadata uses semantic resources" = "FsF_I1_02M"	,
"I3-01M - Metadata includes links between the data and its related entities" = "FsF_I3_01M"	,
"R1-01MD - Metadata specifies the content of the data" = "FsF_R1_01MD"	,
"R1.1-01M - Metadata includes license information under which data can be reused" = "FsF_R1.1_01M"	,
"R1.2-01M - Metadata includes provenance information about data creation or generation" = "FsF_R1.2_01M"	,
"R1.3-01M - Metadata follows a standard recommended by the target research community of the data" = "FsF_R1.3_01M"	,
"R1.3-02D - Data is available in a file format recommended by the target research community" = "FsF_R1.3_02D"
)
) %>%
#########################
select(item, value) %>%
group_by(item, value) %>%
count() %>%
## The plot
ggplot(aes(
x = item,
y = n,
fill = forcats::fct_rev(value)
)) +
# geom_col() +
geom_bar(position = "fill", stat = "identity") +
# geom_col(position = position_stack(reverse = TRUE)) +
scale_x_discrete(limits = rev) +
# scale_fill_discrete(limits = rev) +
scale_fill_manual(values = c("#51B364", "#8ACE7E", "#FFDA66", "#E03531")) +
# scale_fill_brewer(palette = "RdYiGn") +
labs(title = "FAIR maturity indicators",
# fill = "FAIR Level",
x = "FAIR Maturity Indicator",
y = "") +
# coord_flip() +
# facet_grid(. ~ item ) +
coord_flip() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::percent_format())
patch <- p1 | p2
patch / p3 + plot_annotation(tag_levels = 'A')
ggsave(path = here("Figs"),
filename = "Fig_2_A_B_C.pdf",
width = 10, height = 5, device='pdf', dpi=600)
ggsave(path = here("Figs"),
filename = "Fig_2_A_B_C.pdf",
width = 8, height = 4, device='pdf', dpi=600)
ggsave(path = here("Figs"),
filename = "Fig_2_A_B_C.pdf",
width = 20, height = 10, device='pdf', dpi=600)
ggsave(path = here("Figs"),
filename = "Fig_2_A_B_C.pdf",
width = 15, height = 7, device='pdf', dpi=600)
ggarrange(p1, p2, p3,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
ggpubr::ggarrange(p1, p2, p3,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
cowplot::plot_grid(p1, p2, p3,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
ggarrange(p3,                                                 # First row with scatter plot
ggarrange(p1. p2, ncol = 2, labels = c("B", "C")), # Second row with box and dot plots
ggarrange(p3,                                                 # First row with scatter plot
ggarrange(p1, p2, ncol = 2, labels = c("B", "C")), # Second row with box and dot plots
nrow = 2,
labels = "A"                                        # Labels of the scatter plot
)
ggpubr::ggarrange(p3,                                                 # First row with scatter plot
ggarrange(p1, p2, ncol = 2, labels = c("B", "C")), # Second row with box and dot plots
nrow = 2,
labels = "A"                                        # Labels of the scatter plot
)
ggpubr::ggarrange(p3,                                                 # First row with scatter plot
ggarrange(p1, p2, ncol = 2, labels = c("B", "C")), # Second row with box and dot plots
nrow = 2,
labels = "A"                                        # Labels of the scatter plot
)
ggpubr::ggarrange(p1, p2, p3,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
ggpubr::ggarrange(p1, p2,
labels = c("A", "B"),
nrow = 2,
p3)
ggpubr::ggarrange((p1, p2, ncol = 2, labels = c("A", "B")) ,
ggpubr::ggarrange(p1, p2, ncol = 2, labels = c("A", "B")) ,
ggpubr::ggarrange(sp,                                                 # First row with scatter plot
ggarrange(bxp, dp, ncol = 2, labels = c("B", "C")), # Second row with box and dot plots
nrow = 2,
labels = "A"                                        # Labels of the scatter plot
)
ggpubr::ggarrange(p1,                                                 # First row with scatter plot
ggarrange(p2, p3, ncol = 2, labels = c("B", "C")), # Second row with box and dot plots
nrow = 2,
labels = "A"                                        # Labels of the scatter plot
)
p1, p2,
ggpubr::ggarrange(p1, p2,
labels = c("A", "B"),
nrow = 2,
p3)
ggpubr::ggarrange(p1,                                                 # First row with scatter plot
ggarrange(p2, p3, ncol = 2, labels = c("B", "C")), # Second row with box and dot plots
nrow = 2,
labels = "A"                                        # Labels of the scatter plot
)
ggpubr::ggarrange(p1,                                                 # First row with scatter plot
ggpubr::ggarrange(p2, p3, ncol = 2, labels = c("B", "C")), # Second row with box and dot plots
nrow = 2,
labels = "A"                                        # Labels of the scatter plot
)
ggpubr::ggarrange(p2, p3, ncol = 2, labels = c("B", "C"))
ggpubr::ggarrange(p1, p2, ncol = 2, labels = c("A", "B"))
ggpubr::ggarrange(p1, p2, ncol = 2, labels = c("A", "B"),
ggpubr::ggarrange(p3, labels = "C")
)
ggpubr::ggarrange(p1, p2, ncol = 2, labels = c("A", "B"),
ggpubr::ggarrange(p3,  nrow = 2,
labels = "C")
)
cowplot::ggdraw() +
draw_plot(p1, x = 0, y = .5, width = .5, height = .5) +
draw_plot(p2, x = .5, y = .5, width = .5, height = .5) +
draw_plot(p3, x = 0, y = 0, width = 1, height = 0.5) +
draw_plot_label(label = c("A", "B", "C"), size = 15,
x = c(0, 0.5, 0), y = c(1, 1, 0.5))
cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = .5, width = .5, height = .5) +
cowplot::draw_plot(p2, x = .5, y = .5, width = .5, height = .5) +
cowplot::draw_plot(p3, x = 0, y = 0, width = 1, height = 0.5) +
cowplot::draw_plot_label(label = c("A", "B", "C"), size = 15,
x = c(0, 0.5, 0), y = c(1, 1, 0.5))
cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = .5, width = .3, height = .5) +
cowplot::draw_plot(p2, x = .5, y = .5, width = .7, height = .5) +
cowplot::draw_plot(p3, x = 0, y = 0, width = 1, height = 0.5) +
cowplot::draw_plot_label(label = c("A", "B", "C"), size = 15,
x = c(0, 0.5, 0), y = c(1, 1, 0.5))
cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = .5, width = .4, height = .5) +
cowplot::draw_plot(p2, x = .5, y = .5, width = .6, height = .5) +
cowplot::draw_plot(p3, x = 0, y = 0, width = 1, height = 0.5) +
cowplot::draw_plot_label(label = c("A", "B", "C"), size = 15,
x = c(0, 0.5, 0), y = c(1, 1, 0.5))
cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = .5, width = .5, height = .5) +
cowplot::draw_plot(p2, x = .5, y = .5, width = .5, height = .5) +
cowplot::draw_plot(p3, x = 0, y = 0, width = 1, height = 0.5) +
cowplot::draw_plot_label(label = c("A", "B", "C"), size = 15,
x = c(0, 0.5, 0), y = c(1, 1, 0.5))
cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = .5, width = .5, height = .5) +
cowplot::draw_plot(p2, x = .5, y = .5, width = .5, height = .5) +
cowplot::draw_plot(p3, x = 0, y = 0, width = 1, height = 0.5) +
cowplot::draw_plot_label(label = c("A", "B", "C"), size = 15,
x = c(0, 0.5, 0), y = c(1, 1, 0.5))
ggsave(path = here("Figs"),
filename = "Fig_2_A_B_C.pdf",
width = 15, height = 7, device='pdf', dpi=600)
gitcreds::gitcreds_set()
